#include <mpi.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
void cho_Waitany(MPI_Status *status);

int main(int argc, char** argv) {
    // Initialize the MPI environment
	printf("hallo MPI world\n");
    MPI_Init(NULL, NULL);
    enum Messages message = GET_JOB;
    int outBuffer[10];
    MPI_Status status;
    // Get the number of processes
    int world_size;
    int world_rank; // my rank
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);
    //get own rank
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);


    if (world_rank == 0){ //taskhandler
    	cho_Waitany(&status);
		int count = 0;
		MPI_Get_count(&status,MPI_INT,&count);
		MPI_Recv(&inBuffer[rank],count,MPI_INT,rank,status,MPI_COMM_WORLD,&status);
}


void cho_Waitany(MPI_Status *status){
	int noMess = 0;
	//printf("cho wait\n");
	while(noMess == 0){
		//usleep(100000);

		usleep(500000);
		MPI_Iprobe(MPI_ANY_SOURCE,MPI_ANY_TAG,MPI_COMM_WORLD,&noMess,status);

	}
	//printf("received from %i, tag %i\n",status->MPI_SOURCE,status->MPI_TAG);
}
